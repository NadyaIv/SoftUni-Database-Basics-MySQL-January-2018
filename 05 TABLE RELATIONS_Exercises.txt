--- 01. One-To-One Relationship ---

CREATE TABLE passports
(passport_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
passport_number VARCHAR(50) NOT NULL UNIQUE
);
CREATE TABLE persons
(person_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(50),
salary DECIMAL(10,2) UNSIGNED,
passport_id INT UNSIGNED NOT NULL UNIQUE,
FOREIGN KEY (passport_id) REFERENCES passports(passport_id)
);
INSERT INTO passports (passport_id,passport_number)
VALUES (101,'N34FG21B'),(102,'K65LO4R7'),(103,'ZE657QP2');
INSERT INTO persons (person_id,first_name,salary,passport_id)
VALUES (1,'Roberto',43300.00,102),
(2,'Tom',56100.00,103),
(3,'Yana',60200.00,101);

--- 02. One-To-Many Relationship ---

CREATE TABLE manufacturers
(manufacturer_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50),
established_on DATE
);
CREATE TABLE models
(model_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
name  VARCHAR(50),
manufacturer_id INT UNSIGNED NOT NULL,
FOREIGN KEY (manufacturer_id) REFERENCES manufacturers(manufacturer_id)
);
INSERT INTO manufacturers(manufacturer_id,name,established_on) 
VALUES (1,'BMW','1916-03-01'),
(2,'Tesla','2003-01-01'),
(3,'Lada','1966-05-01');
INSERT INTO models(model_id,name,manufacturer_id)
VALUES (101,'X1',1),
(102,'i6',1),
(103,'Model S',2),
(104,'Model X',2),
(105,'Model 3',2),
(106,'Nova',3);


--- 03.Many-To-Many Relationship ---

CREATE TABLE students                                          
(student_id INT UNSIGNED NOT NULL PRIMARY KEY ,                
name VARCHAR(50)                                               
);                                                             
CREATE TABLE exams                                             
(exam_id INT UNSIGNED NOT NULL PRIMARY KEY ,                   
name VARCHAR(50)                                               
);                                                           
CREATE TABLE students_exams                                     
(student_id INT UNSIGNED NOT NULL ,                            
exam_id INT UNSIGNED NOT NULL,                                 
PRIMARY KEY (student_id,exam_id),                              
FOREIGN KEY (student_id) REFERENCES students(student_id),      
FOREIGN KEY (exam_id) REFERENCES exams(exam_id)                
);                                                             
INSERT INTO students(student_id,name)                          
VALUES (1,'Mila'),(2,'Toni'),(3,'Ron');                        
INSERT INTO exams(exam_id,name)                                
VALUES (101,'Spring MVC'),(102,'Neo4j'),(103,'Oracle 11g');    
INSERT INTO students_exams (student_id,exam_id)                 
VALUES (1,101),(1,102),(2,101),(3,103),(2,102),(2,103);

--- 04. Self-Referencing ---

CREATE TABLE teachers 
(teacher_id INT UNSIGNED NOT NULL PRIMARY KEY,
name VARCHAR(50),
manager_id INT UNSIGNED 
);
INSERT INTO teachers(teacher_id,name,manager_id)
VALUES (101,'John',NULL),
(102,'Maya',106),
(103,'Silvia',106),
(104,'Ted',105),
(105,'Mark',101),
(106,'Greta',101);
ALTER TABLE teachers
ADD CONSTRAINT fk_techers
FOREIGN KEY (manager_id) REFERENCES teachers (teacher_id);

--- 05. Online Store Database ---

CREATE TABLE item_types
(item_type_id INT(11) NOT NULL PRIMARY KEY,
name VARCHAR(50)
);
CREATE TABLE cities
(city_id INT(11) NOT NULL PRIMARY KEY,
name VARCHAR(50)
);
CREATE TABLE customers
(customer_id INT(11) NOT NULL PRIMARY KEY,
name VARCHAR(50),
birthday DATE,
city_id INT(11) NOT NULL,
FOREIGN KEY (city_id) REFERENCES cities(city_id)
);
CREATE TABLE orders
(order_id INT(11) NOT NULL PRIMARY KEY,
customer_id INT(11)  NOT NULL,
FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
CREATE TABLE items
(item_id INT(11)  NOT NULL PRIMARY KEY,
name VARCHAR(50),
item_type_id INT(11)  NOT NULL,
FOREIGN KEY (item_type_id) REFERENCES item_types(item_type_id)
);
CREATE TABLE order_items
(order_id INT(11)  NOT NULL,
item_id INT(11)  NOT NULL,
PRIMARY KEY (order_id,item_id),
FOREIGN KEY (order_id) REFERENCES orders(order_id),
FOREIGN KEY (item_id) REFERENCES items(item_id)
);

--- 06. University Database ---

CREATE TABLE majors
(major_id INT(11)  NOT NULL PRIMARY KEY,
name VARCHAR(50)
);
CREATE TABLE students
(student_id INT(11)  NOT NULL PRIMARY KEY,
student_number VARCHAR(12),
student_name VARCHAR(50),
major_id INT(11)  NOT NULL,
FOREIGN KEY (major_id) REFERENCES majors(major_id)
);
CREATE TABLE payments
(payment_id INT(11)  NOT NULL PRIMARY KEY,
payment_date DATE,
payment_amount DECIMAL(8,2),
student_id INT(11)  NOT NULL,
FOREIGN KEY (student_id) REFERENCES students(student_id)
);
CREATE TABLE subjects
(subject_id INT(11)  NOT NULL PRIMARY KEY,
subject_name VARCHAR(50)
);
CREATE TABLE agenda
(student_id INT(11)  NOT NULL,
subject_id INT(11)  NOT NULL,
PRIMARY KEY (student_id ,subject_id ),
FOREIGN KEY (student_id) REFERENCES students(student_id),
FOREIGN KEY (subject_id) REFERENCES subjects(subject_id)
);

--- 09. Peaks in Rila ---

SELECT m.mountain_range,p.peak_name,p.elevation AS peak_elevation FROM peaks AS p
JOIN mountains AS m ON m.id=p.mountain_id
WHERE m.mountain_range='Rila' ORDER BY p.elevation DESC;



