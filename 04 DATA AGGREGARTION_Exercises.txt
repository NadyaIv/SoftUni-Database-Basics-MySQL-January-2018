--- 01. Records’ Count ---

SELECT COUNT(*) AS count FROM wizzard_deposits;

--- 02. Longest Magic Wand ---

SELECT MAX(magic_wand_size) AS `longest_magic_wand` FROM wizzard_deposits;

--- 03.Longest Magic Wand per Deposit Groups ---

SELECT  deposit_group,MAX(magic_wand_size) AS longest_magic_wand  FROM wizzard_deposits
GROUP BY deposit_group ORDER BY longest_magic_wand,deposit_group;

--- 04.Smallest Deposit Group per Magic Wand Size* ---

SELECT  deposit_group  FROM wizzard_deposits
GROUP BY deposit_group ORDER BY AVG(magic_wand_size) LIMIT 1;

--- 05. Deposits Sum ---

SELECT deposit_group,SUM(deposit_amount) AS total_sum FROM wizzard_deposits
GROUP BY deposit_group ORDER BY total_sum ;

--- 06. Deposits Sum for Ollivander family ---

SELECT deposit_group,SUM(deposit_amount) AS total_sum FROM wizzard_deposits
GROUP BY deposit_group,magic_wand_creator  HAVING magic_wand_creator='Ollivander family' 
ORDER BY deposit_group;

--- 07. Deposits Filter ---

SELECT deposit_group,SUM(deposit_amount) AS total_sum FROM wizzard_deposits
GROUP BY deposit_group,magic_wand_creator  
HAVING magic_wand_creator='Ollivander family' and total_sum<150000 
ORDER BY total_sum DESC;

--- 08. Deposit charge ---

SELECT 	deposit_group ,magic_wand_creator,MIN(deposit_charge) AS min_deposit_charge FROM wizzard_deposits
 GROUP BY deposit_group,magic_wand_creator ORDER BY magic_wand_creator,deposit_group;

--- 09. Age Groups ---

SELECT CASE 
WHEN age  BETWEEN 0 AND 10 THEN '[0-10]'
WHEN age BETWEEN 11 AND 20 THEN '[11-20]'
WHEN age  BETWEEN 21 AND 30 THEN '[21-30]'
WHEN age  BETWEEN 31 AND 40 THEN '[31-40]'
WHEN age  BETWEEN 41 AND 50 THEN '[41-50]'
WHEN age  BETWEEN 51 AND 60 THEN '[51-60]'
ELSE  '[61+]' END AS ages,COUNT(age) AS wizzard_count FROM wizzard_deposits
GROUP BY ages

--- 10. First Letter ---

SELECT DISTINCT LEFT(first_name,1) AS first_letter FROM wizzard_deposits
WHERE deposit_group='Troll Chest' ORDER BY first_letter

--- 11. Average Interest  ---

SELECT deposit_group,is_deposit_expired,AVG(deposit_interest) AS average_interest FROM wizzard_deposits 
WHERE deposit_start_date > '1985-01-01'
GROUP BY deposit_group,is_deposit_expired
ORDER BY deposit_group DESC,is_deposit_expired;

--- 12. Rich Wizard, Poor Wizard*  ---

SELECT SUM( wd.deposit_amount-wd1.deposit_amount) AS sum_difference FROM wizzard_deposits AS wd,wizzard_deposits AS wd1
WHERE wd1.id - wd.id = 1;

--- 13. Employees Minimum Salaries  ---

SELECT department_id,MIN(salary) FROM employees 
GROUP BY department_id HAVING department_id IN(2,5,7);

--- 14. Employees Average Salaries ---

CREATE TABLE avge_salary AS
SELECT * FROM employees
WHERE salary>30000;
DELETE FROM avge_salary
WHERE manager_id=42;
UPDATE avge_salary 
SET salary=salary+5000
WHERE department_id=1;
SELECT department_id,AVG(salary) AS avg_salary FROM avge_salary
GROUP BY department_id ORDER BY department_id;

--- 15. Employees Maximum Salaries ---

SELECT department_id,MAX(salary) AS max_salary FROM employees
GROUP BY department_id HAVING max_salary<30000 OR max_salary>70000
ORDER BY department_id;

--- 16. Employees Count Salaries ---

SELECT COUNT(salary) FROM employees
WHERE manager_id IS NULL;

--- 17. 3rd Highest Salary* ---

SELECT
    emp.department_id, MAX(emp.salary) as third_highest_salary
FROM
    employees AS emp
        JOIN
    (SELECT
        e.department_id AS department_id,
            MAX(e.salary) AS max_salary
    FROM
        employees AS e
    JOIN (SELECT
        e.department_id AS department_id,
            MAX(e.salary) AS max_salary
    FROM
        employees AS e
    GROUP BY e.department_id) AS first_max_salary
    ON e.department_id = first_max_salary.department_id
    WHERE
        e.salary < first_max_salary.max_salary
    GROUP BY e.department_id) AS second_max_salary
    ON emp.department_id = second_max_salary.department_id
    WHERE emp.salary < second_max_salary.max_salary
    GROUP BY emp.department_id
    ORDER BY emp.department_id;


--- 18. Salary Challenge**  ---

select em.first_name, em.last_name, em.department_id
from employees as em
join
(select e.department_id, avg(e.salary) as avg_salary
from employees as e
group by e.department_id) as avg_salaries
on em.department_id = avg_salaries.department_id
where em.salary > avg_salaries.avg_salary
order by em.department_id
limit 10;

--- 19. Departments Total Salaries  ---

SELECT department_id,SUM(salary) AS total_salary FROM employees
GROUP BY department_id ORDER BY department_id;












